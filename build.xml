<?xml version="1.0" encoding="UTF-8"?>
    <!-- You may freely edit this file. See commented blocks below for -->
    <!-- some examples of how to customize the build. -->
    <!-- (If you delete it and reopen the project it will be recreated.) -->
    <!-- By default, only the Clean and Build commands use this build script. -->
    <project name="IntelliVision" default="default" basedir="." xmlns:fx="javafx:com.sun.javafx.tools.ant">
    <description>Builds, tests, and runs the project IntelliVision.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. Those of them relevant for JavaFX project are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-jfx-jar:              called before FX SDK specific <fx:jar> task
      -post-jfx-jar:             called after FX SDK specific <fx:jar> task
      -pre-jfx-deploy:           called before FX SDK specific <fx:deploy> task
      -post-jfx-deploy:          called after FX SDK specific <fx:deploy> task
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting a HTML postprocessor after javaFX SDK deployment:

        <target name="-post-jfx-deploy">
            <basename property="jfx.deployment.base" file="${jfx.deployment.jar}" suffix=".jar"/>
            <property name="jfx.deployment.html" location="${jfx.deployment.dir}${file.separator}${jfx.deployment.base}.html"/>
            <custompostprocess>
                <fileset dir="${jfx.deployment.html}"/>
            </custompostprocess>
        </target>

    Example of calling an Ant task from JavaFX SDK. Note that access to JavaFX SDK Ant tasks must be
    initialized; to ensure this is done add the dependence on -check-jfx-sdk-version target:

        <target name="-post-jfx-jar" depends="-check-jfx-sdk-version">
            <echo message="Calling jar task from JavaFX SDK"/>
            <fx:jar ...>
                ...
            </fx:jar>
        </target>

    For more details about JavaFX SDK Ant tasks go to
    http://docs.oracle.com/javafx/2/deployment/jfxpub-deployment.htm

    For list of available properties check the files
    nbproject/build-impl.xml and nbproject/jfx-impl.xml.

    -->

    <!-- Build ccondition variables -->
    <property name="obfuscate" value="false" />
    <property name="packaging" value="false" />

    <!-- Increment build number -->
    <target name="-post-init">
        <echo message="Incrementing build number..." />
        <property name="clas.dir" location="${src.dir}/../subprojects/." />
        <property name="manifest" location="${src.dir}/com/intellijustice/resources/schemas/Manifest.xml" />
        <property name="binary"   value="Incrementer" />

        <exec executable="${platform.java}">
            <arg line="-classpath ${clas.dir} ${binary} ${manifest}" />
        </exec>
    </target>

    <!-- Embed external fonts -->
    <target name="-post-compile" depends="init">
        <mkdir dir="${build.classes.dir}/META-INF"/>
        <copy file="fonts.mf" todir="${build.classes.dir}/META-INF"/>
    </target>

    <!-- Obfuscate binary file -->
    <target name="-post-jfx-jar" if="${obfuscate}">
        <echo message="Obfuscating binary file..." />
        <property name="proguard.jar.path" value="${src.dir}/../tools/proguard.jar" />

        <taskdef resource="proguard/ant/task.properties"
                 classpath="${proguard.jar.path}" />

        <echo message="Obfuscating ${dist.jar}..."/>
        <mkdir dir="${build.dir}/obfuscated"/>
        <proguard printmapping="${build.dir}/obfuscated/${application.title}.map"
                  renamesourcefileattribute="SourceFile" ignorewarnings="true">

            <!-- Specify the input jars, output jars, and library jars. -->
            <injar  file="${dist.jar}" />
            <outjar file="${build.dir}/obfuscated/${application.title}.jar" />

            <libraryjar path="${javac.classpath}" />
            <libraryjar file="${java.home}/lib/rt.jar" />
            <libraryjar file="${java.home}/lib/jce.jar" />
            <libraryjar file="${java.home}/lib/jfxrt.jar" />
            <libraryjar file="${java.home}/lib/javaws.jar" />

            <!-- Keep some useful attributes. -->
            <keepattribute name="InnerClasses" />
            <keepattribute name="SourceFile" />
            <keepattribute name="LineNumberTable" />
            <keepattribute name="Deprecated" />
            <keepattribute name="*Annotation*" />
            <keepattribute name="Signature" />
            <keepattribute name="Exceptions" />

            <!-- Preserve all public classes, and their public and protected fields and methods. -->
            <keep access="public">
                <field  access="public protected" />
                <method access="public protected" />
            </keep>

            <!-- Preserve all .class method names. -->
            <keepclassmembernames access="public">
                <method type      ="java.lang.Class"
                        name      ="class$"
                        parameters="java.lang.String" />
                <method type      ="java.lang.Class"
                        name      ="class$"
                        parameters="java.lang.String,boolean" />
            </keepclassmembernames>

            <!-- Preserve all native method names and the names of their classes. -->
            <keepclasseswithmembernames>
                <method access="native" />
            </keepclasseswithmembernames>

            <!-- Preserve the methods that are required in all enumeration classes. -->
            <keepclassmembers extends="java.lang.Enum">
                <method access="public static"
                        type="**[]"
                        name="values"
                        parameters="" />
                <method access="public static"
                        type="**"
                        name="valueOf"
                        parameters="java.lang.String" />
            </keepclassmembers>

            <!-- Explicitly preserve all serialization members. The Serializable
            interface is only a marker interface, so it wouldn't save them.
            You can comment this out if your library doesn't use serialization.
            With this code serializable classes will be backward compatible -->

            <keepnames implements="java.io.Serializable"/>
            <keepclassmembers implements="java.io.Serializable">
                <field  access    ="final"
                        type      ="long"
                        name      ="serialVersionUID" />
                <field  access    ="!static !transient"
                        name      ="**"/>
                <field  access    ="!private"
                        name      ="**"/>
                <method access    ="!private"
                        name      ="**"/>
                <method access    ="private"
                        type      ="void"
                        name      ="writeObject"
                        parameters="java.io.ObjectOutputStream" />
                <method access    ="private"
                        type      ="void"
                        name      ="readObject"
                        parameters="java.io.ObjectOutputStream" />
                <method type      ="java.lang.Object"
                        name      ="writeReplace"
                        parameters="" />
                <method type      ="java.lang.Object"
                        name      ="readResolve"
                        parameters="" />
            </keepclassmembers>

            <!-- Your application may contain more items that need to be preserved;
            typically classes that are dynamically created using Class.forName -->

            <!-- Keep JavaFX and corresponding UI code -->
            <keep annotation="javafx.fxml.FXML" />
            <keep name="com.javafx.main.*" allowobfuscation="true" />
            <keepclassmembers name="com.javafx.main.Main">
                <method name="Main" />
            </keepclassmembers>
            <keepclassmembers name="com.intellijustice.ui.controllers.*">
                <method name="*" />
            </keepclassmembers>
        </proguard>
        <copy file="${build.dir}/obfuscated/${application.title}.jar" tofile="${dist.jar}" overwrite="true"/>
        <delete dir="${build.dir}/obfuscated"/>
    </target>

    <!-- Build Native Package -->
    <target name="-post-jfx-deploy" if="${packaging}">
        <echo message="Building native package.." />
        <fx:deploy width="${javafx.run.width}" height="${javafx.run.height}"
                  nativeBundles="all"
                  outdir="${basedir}/${dist.dir}" outfile="${application.title}"
                  verbose="true">
            <fx:application name="IntelliJustice" mainClass="${javafx.main.class}"/>
            <fx:resources>
                <!-- jar files with classes and shared data -->
                <fx:fileset dir="${basedir}/${dist.dir}" includes="*.jar"/>
                <fx:fileset dir="dist" includes="lib/*.jar"/>

                <!-- add native libs for deployment descriptor -->
                <fx:fileset dir="build" type="native"
                            os="windows" arch="x86"
                            includes="native-libs-win-x86.jar"/>
                <fx:fileset dir="build" type="native"
                            os="windows" arch="x64"
                            includes="native-libs-win-x64.jar"/>
            </fx:resources>
            <fx:info title="${application.title}" vendor="${application.vendor}">
                <fx:icon href="media/IntelliJustice.png" />
            </fx:info>
        </fx:deploy>
    </target>
</project>