import java.util.Map;
import java.util.TreeMap;

class Transforms {

    private static final String[] transforms = {
        "ASCII-Latin",
        "Accents-Any",
        "Amharic-Latin/BGN",
        "Any-Accents",
        "Any-Publishing",
        "Arabic-Latin",
        "Arabic-Latin/BGN",
        "Armenian-Latin",
        "Armenian-Latin/BGN",
        "Azerbaijani-Latin/BGN",
        "Belarusian-Latin/BGN",
        "Bengali-Devanagari",
        "Bengali-Gujarati",
        "Bengali-Gurmukhi",
        "Bengali-Kannada",
        "Bengali-Latin",
        "Bengali-Malayalam",
        "Bengali-Oriya",
        "Bengali-Tamil",
        "Bengali-Telugu",
        "Bopomofo-Latin",
        "Bulgarian-Latin/BGN",
        "Cyrillic-Latin",
        "Devanagari-Bengali",
        "Devanagari-Gujarati",
        "Devanagari-Gurmukhi",
        "Devanagari-Kannada",
        "Devanagari-Latin",
        "Devanagari-Malayalam",
        "Devanagari-Oriya",
        "Devanagari-Tamil",
        "Devanagari-Telugu",
        "Digit-Tone",
        "Fullwidth-Halfwidth",
        "Georgian-Latin",
        "Georgian-Latin/BGN",
        "Greek-Latin",
        "Greek-Latin/BGN",
        "Greek-Latin/UNGEGN",
        "Gujarati-Bengali",
        "Gujarati-Devanagari",
        "Gujarati-Gurmukhi",
        "Gujarati-Kannada",
        "Gujarati-Latin",
        "Gujarati-Malayalam",
        "Gujarati-Oriya",
        "Gujarati-Tamil",
        "Gujarati-Telugu",
        "Gurmukhi-Bengali",
        "Gurmukhi-Devanagari",
        "Gurmukhi-Gujarati",
        "Gurmukhi-Kannada",
        "Gurmukhi-Latin",
        "Gurmukhi-Malayalam",
        "Gurmukhi-Oriya",
        "Gurmukhi-Tamil",
        "Gurmukhi-Telugu",
        "Halfwidth-Fullwidth",
        "Han-Latin",
        "Han-Latin/Names",
        "Hangul-Latin",
        "Hans-Hant",
        "Hant-Hans",
        "Hebrew-Latin",
        "Hebrew-Latin/BGN",
        "Hiragana-Katakana",
        "Hiragana-Latin",
        "IPA-XSampa",
        "Jamo-Latin",
        "JapaneseKana-Latin/BGN",
        "Kannada-Bengali",
        "Kannada-Devanagari",
        "Kannada-Gujarati",
        "Kannada-Gurmukhi",
        "Kannada-Latin",
        "Kannada-Malayalam",
        "Kannada-Oriya",
        "Kannada-Tamil",
        "Kannada-Telugu",
        "Katakana-Hiragana",
        "Katakana-Latin",
        "Kazakh-Latin/BGN",
        "Kirghiz-Latin/BGN",
        "Korean-Latin/BGN",
        "Latin-ASCII",
        "Latin-Arabic",
        "Latin-Armenian",
        "Latin-Bengali",
        "Latin-Bopomofo",
        "Latin-Cyrillic",
        "Latin-Devanagari",
        "Latin-Georgian",
        "Latin-Greek",
        "Latin-Greek/UNGEGN",
        "Latin-Gujarati",
        "Latin-Gurmukhi",
        "Latin-Hangul",
        "Latin-Hebrew",
        "Latin-Hiragana",
        "Latin-Jamo",
        "Latin-Kannada",
        "Latin-Katakana",
        "Latin-Malayalam",
        "Latin-NumericPinyin",
        "Latin-Oriya",
        "Latin-Syriac",
        "Latin-Tamil",
        "Latin-Telugu",
        "Latin-Thaana",
        "Latin-Thai",
        "Macedonian-Latin/BGN",
        "Malayalam-Bengali",
        "Malayalam-Devanagari",
        "Malayalam-Gujarati",
        "Malayalam-Gurmukhi",
        "Malayalam-Kannada",
        "Malayalam-Latin",
        "Malayalam-Oriya",
        "Malayalam-Tamil",
        "Malayalam-Telugu",
        "Maldivian-Latin/BGN",
        "Mongolian-Latin/BGN",
        "NumericPinyin-Latin",
        "NumericPinyin-Pinyin",
        "Oriya-Bengali",
        "Oriya-Devanagari",
        "Oriya-Gujarati",
        "Oriya-Gurmukhi",
        "Oriya-Kannada",
        "Oriya-Latin",
        "Oriya-Malayalam",
        "Oriya-Tamil",
        "Oriya-Telugu",
        "Pashto-Latin/BGN",
        "Persian-Latin/BGN",
        "Pinyin-NumericPinyin",
        "Publishing-Any",
        "Russian-Latin/BGN",
        "Serbian-Latin/BGN",
        "Simplified-Traditional",
        "Syriac-Latin",
        "Tamil-Bengali",
        "Tamil-Devanagari",
        "Tamil-Gujarati",
        "Tamil-Gurmukhi",
        "Tamil-Kannada",
        "Tamil-Latin",
        "Tamil-Malayalam",
        "Tamil-Oriya",
        "Tamil-Telugu",
        "Telugu-Bengali",
        "Telugu-Devanagari",
        "Telugu-Gujarati",
        "Telugu-Gurmukhi",
        "Telugu-Kannada",
        "Telugu-Latin",
        "Telugu-Malayalam",
        "Telugu-Oriya",
        "Telugu-Tamil",
        "Thaana-Latin",
        "Thai-Latin",
        "Tone-Digit",
        "Traditional-Simplified",
        "Turkmen-Latin/BGN",
        "Ukrainian-Latin/BGN",
        "Uzbek-Latin/BGN",
        "XSampa-IPA",
        "az-Lower",
        "az-Title",
        "az-Upper",
        "cs-cs_FONIPA",
        "cs-ja",
        "cs-ko",
        "cs_FONIPA-ja",
        "cs_FONIPA-ko",
        "el-Lower",
        "el-Title",
        "el-Upper",
        "es-am",
        "es-es_FONIPA",
        "es-ja",
        "es-zh",
        "es_419-ja",
        "es_419-zh",
        "es_FONIPA-am",
        "es_FONIPA-es_419_FONIPA",
        "es_FONIPA-ja",
        "es_FONIPA-zh",
        "it-am",
        "it-ja",
        "ja_Latn-ko",
        "ja_Latn-ru",
        "lt-Lower",
        "lt-Title",
        "lt-Upper",
        "nl-Title",
        "pl-ja",
        "pl-pl_FONIPA",
        "pl_FONIPA-ja",
        "ro-ja",
        "ro-ro_FONIPA",
        "ro_FONIPA-ja",
        "ru-ja",
        "ru-zh",
        "sk-ja",
        "sk-sk_FONIPA",
        "sk_FONIPA-ja",
        "tr-Lower",
        "tr-Title",
        "tr-Upper",
        "zh_Latn_PINYIN-ru",
        "Any-Null",
        "Any-Remove",
        "Any-Hex/Unicode",
        "Any-Hex/Java",
        "Any-Hex/C",
        "Any-Hex/XML",
        "Any-Hex/XML10",
        "Any-Hex/Perl",
        "Any-Hex/Plain",
        "Any-Hex",
        "Hex-Any/Unicode",
        "Hex-Any/Java",
        "Hex-Any/C",
        "Hex-Any/XML",
        "Hex-Any/XML10",
        "Hex-Any/Perl",
        "Hex-Any",
        "Any-Lower",
        "Any-Upper",
        "Any-Title",
        "Any-CaseFold",
        "Any-Name",
        "Name-Any",
        "Any-NFC",
        "Any-NFD",
        "Any-NFKC",
        "Any-NFKD",
        "Any-FCD",
        "Any-FCC",
        "Any-Latin/BGN",
        "Any-Latin",
        "Any-Katakana",
        "Any-ko",
        "Any-ja",
        "Any-zh",
        "Any-es_419_FONIPA",
        "Any-am",
        "Any-Latin/Names",
        "Any-Hiragana",
        "Any-Bopomofo",
        "Any-Devanagari",
        "Any-Gujarati",
        "Any-Hebrew",
        "Any-Kannada",
        "Any-Hangul",
        "Any-Gurmukhi",
        "Any-Tamil",
        "Any-Malayalam",
        "Any-Arabic",
        "Any-Bengali",
        "Any-Telugu",
        "Any-Thaana",
        "Any-Georgian",
        "Any-Greek",
        "Any-Greek/UNGEGN",
        "Any-Syriac",
        "Any-Armenian",
        "Any-Thai",
        "Any-Cyrillic",
        "Any-Oriya",
        "Any-es_FONIPA",
        "Any-ro_FONIPA",
        "Any-Hant",
        "Any-Hans",
        "Any-sk_FONIPA",
        "Any-ru",
        "Any-Latin/UNGEGN",
        "Any-cs_FONIPA",
        "Any-pl_FONIPA"};

    private static String getFullLanguageName(final String shortName) {
        final Map<String, String> languages = new TreeMap<>();

        languages.put("en", "English");
        languages.put("ru", "Russian");
        languages.put("uk", "Ukrainian");

        return languages.getOrDefault(shortName, shortName);
    }

    private static String transformIsExists(final String value) {
        for (final String entry : transforms) {
            if (entry.startsWith(value)) {
                return entry;
            }
        }

        return null;
    }

    private static String getTransform(final String source, final String target) {
        final String sourceFull = getFullLanguageName(source);
        final String targetFull = getFullLanguageName(target);

        String transform  = "";

        /* search for full name transform */
        transform = sourceFull + "-" + targetFull;
        System.out.println("Validate: " + transform);
        transform = transformIsExists(transform);
        if (transform != null) {
            System.out.println("Transform is found: " + transform);
            return transform;
        }

        /* search for full name with Latin replacement */
        transform = (sourceFull.equals("English") ? "Latin" : sourceFull) + "-" +
            (targetFull.equals("English") ? "Latin" : targetFull);
        System.out.println("Validate: " + transform);
        transform = transformIsExists(transform);
        if (transform != null) {
            System.out.println("Transform is found: " + transform);
            return transform;
        }

        return "";
    }

    public static void main(final String[] args) {
        System.out.println(getTransform("ru", "en") + "\n"); 
        System.out.println(getTransform("uk", "en") + "\n");

        System.out.println(getTransform("en", "ru") + "\n"); 
        System.out.println(getTransform("en", "uk") + "\n");
    }
}
